buildscript {
    repositories {
        maven { url = 'https://plugins.gradle.org/m2/' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven {
            url = 'https://repo.spongepowered.org/repository/maven-public/'
            content { includeGroup 'org.spongepowered' }
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${forgegradle_version}", changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: "${mixingradle_version}"
        classpath group: 'org.parchmentmc', name: 'librarian', version: "${librarian_version}"
    }
}
plugins {
	id 'java'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'org.cadixdev.licenser' version '0.6.1'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'maven-publish'

group = 'com.teammoeg'
version = "${minecraft_version}-${mod_version}"
archivesBaseName = 'caupona'
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
sourceSets {
    main {
        resources {
            srcDirs = [
                    "$rootDir/src/main/resources",
                    'src/generated/resources'
            ]
        }
    }
	datagen {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.output
        runtimeClasspath += main.output
        resources {
            srcDirs = [
                    "$rootDir/src/datagen/resources",
            ]
        }
    }
}
task genItemNames(){
	inputs.file(sourceSets.main.resources.srcDirs[0])
	outputs.file(new File(sourceSets.datagen.resources.srcDirs[0],"assets/caupona/item/items.txt"))
	file(new File(sourceSets.datagen.resources.srcDirs[0],"assets/caupona/item/items.txt")).withWriter{ out ->
  		fileTree(include:['*.png'],dir:"src/main/resources/assets/caupona/textures/item").each {out.println "\""+it.name+"\","}
	}
}
minecraft {
	//mappings channel: 'snapshot', version: '20210309-1.16.5'
    mappings channel: 'parchment', version: "${parchment_mappings}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=" + "caupona.mixins.json"
            mods {
                caupona {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=" + "caupona.mixins.json"
            mods {
                caupona {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'caupona', '--all', '--output', file('src/generated/resources/'), 'validate', '--existing', file('src/main/resources/')
            mods {
                caupona {
					source sourceSets.main
                    source sourceSets.datagen
                }
            }
        }
    }
}


mixin {
    add sourceSets.main, "caupona.refmap.json"
}

repositories {
    mavenLocal()
    // JEI and TC Files
    maven {
        name = "DVS1 Maven FS"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    // Needed for JEI
    maven {
        name = "latvian maven"
        url = "https://maven.latmod.com/"
    }
    // Needed for Curios API
    maven {
        name = "theillusivec4 maven"
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    //for patchouli books
    maven { url 'https://maven.blamejared.com' }
    maven {
        url "https://maven.architectury.dev/"
    }
    maven {
        url "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.ftb.mods"
            includeGroup "dev.latvian.mods"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
//    compile fileTree(include: ['*.jar'], dir: 'libs')

    //compile fg.deobf('com.cannolicatfish:Project-Rankine:1.16.5-1.3')
    //implementation fg.deobf('com.cannolicatfish:Project-Rankine:1.16.5-1.3')

    implementation fg.deobf("curse.maven:diet-443570:3758891")

    //implementation fg.deobf("mezz.jei:jei-1.16.5:7.6.4.88")
    
    //compile fg.deobf("curse.maven:kiwi-303657:3377053")
	//implementation fg.deobf("curse.maven:kiwi-303657:3377053")
	
	//compile fg.deobf("curse.maven:farmers-delight-398521:3573686")
	//implementation fg.deobf("curse.maven:farmers-delight-398521:3573686")
	
	//compile fg.deobf("curse.maven:pams-harvestcraft-2-crops-361385:3276350")
	//implementation fg.deobf("curse.maven:pams-harvestcraft-2-crops-361385:3276350")
	
	//compile fg.deobf("curse.maven:crock-pot-404523:3568413")
	implementation fg.deobf("curse.maven:crock-pot-404523:3782459")
	
	//compile fg.deobf("curse.maven:simple-farming-327554:3400041")
	//implementation fg.deobf("curse.maven:simple-farming-327554:3400041")

	
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.18.2-67:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.18.2-67")
    //runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.5-4.0.5.2")
    //compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.5-4.0.5.2:api")

    //runtimeOnly fg.deobf("gloridifice.watersource:WaterSource:1.1.33-beta-1.16.5")
   // compileOnly fg.deobf("gloridifice.watersource:WaterSource:1.1.33-beta-1.16.5")

    // FG5 requires 0.8.3
    annotationProcessor "org.spongepowered:mixin:0.8.3:processor"
    testAnnotationProcessor "org.spongepowered:mixin:0.8.3:processor"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Caupona",
                "Specification-Vendor"    : "TeamMoeg",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "TeamMoeg",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "caupona.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')
build.finalizedBy('genItemNames')
task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set('deobf')
}

artifacts {
    archives sourcesJar
    archives deobfJar
}
String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "Caupona ${version}"
                temp = "<span style=\"font-size: 18px; color: #333399;\">caupona v${mod_version}</span>&nbsp;&nbsp;<em>for Minecraft ${minecraft_version}</em><br/>"
            }else {
                temp = "<h4>$temp</h4>"
            }
            str += temp
            lineCount++
        }
    }
    return str
}


// Automatically apply a license header when running checkLicense / updateLicense
license {
    header = project.file('HEADER.txt')
    ignoreFailures = true
    include '**/*.java'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact deobfJar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            name = "TeamMoeg"
            url = "http://server.teammoeg.com:8888/releases"
            credentials {
                username = System.getenv('TEAMMOEG_USER')
                password = System.getenv('TEAMMOEG_TOKEN')
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}
