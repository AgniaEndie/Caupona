
plugins {
	id 'net.neoforged.gradle.userdev' version "${version_neogradle}"
   // id 'org.spongepowered.mixin' version "${mixingradle_version}"
   // id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    //id "com.modrinth.minotaur" version "2.+"
    //id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
}
/*
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'maven-publish'*/

version = mod_version
group = mod_group_id
archivesBaseName = 'caupona'
compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
sourceSets {
    main {
    	java {
    		srcDir 'src/generated/java'
    		srcDir 'src/main/java'
    	}
        resources {
            srcDir 'src/generated/resources'
        }
    }
	datagen {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.output
        runtimeClasspath += main.output
        resources {
            srcDirs = [
                    "$rootDir/src/datagen/resources",
            ]
        }
    }
    buildtools
}
minecraft {
  accessTransformers {
    file('src/main/resources/META-INF/accesstransformer.cfg')
  }
}
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')
		//modSource project.sourceSets.datagen
        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        modSource project.sourceSets.datagen
        programArguments.addAll '--mod', project.mod_id,
         '--all',
         '--output', file('src/generated/resources/').getAbsolutePath(),
         '--existing', file('src/main/resources/').getAbsolutePath()
    }
}


/*
mixin {
    add sourceSets.main, "caupona.refmap.json"
}
*/
repositories {
    mavenLocal()
    mavenCentral()
    // Needed for JEI
    maven {
        name = "latvian maven"
        url = "https://maven.latmod.com/"
        content {
            includeGroup "mezz.jei"
        }
    }
   maven {
        url "https://www.khjxiaogu.com/maven"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    //for patchouli books
    maven { url 'https://maven.blamejared.com' }
    maven {
        url "https://maven.architectury.dev/"
    }
    maven {
        url "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.ftb.mods"
            includeGroup "dev.latvian.mods"
        }
    }
}

dependencies {
    //minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	implementation "net.neoforged:neoforge:${neo_version}"
    //implementation fg.deobf("curse.maven:diet-443570:3758891")

	//compileOnly fg.deobf("mezz.jei:jei-1.19.2-common-api:11.2.0.247")
	compileOnly "curse.maven:jei-238222:5071127"
	//implementation fg.deobf("mezz.jei:jei-1.19.3-forge:12.3.0.21")
    
	//implementation fg.deobf("curse.maven:kiwi-303657:3974084")
	
	//implementation fg.deobf("curse.maven:treechop-421377:4365698")

	//implementation fg.deobf("curse.maven:create-328085:4371809")

	//implementation fg.deobf("curse.maven:farmers-delight-398521:3573686")
	
	//implementation fg.deobf("curse.maven:pams-harvestcraft-2-crops-361385:3276350")
	
	//implementation fg.deobf("curse.maven:crock-pot-404523:3782459")
	
	//implementation fg.deobf("curse.maven:simple-farming-327554:3400041")

    //compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.20.1-81-FORGE:api")
    compileOnly "vazkii.patchouli:Patchouli:1.20.1-81-FORGE:api"

    // FG5 requires 0.8.3
    //annotationProcessor "org.spongepowered:mixin:0.8.3:processor"
    //testAnnotationProcessor "org.spongepowered:mixin:0.8.3:processor"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Caupona",
                "Specification-Vendor"    : "TeamMoeg",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "TeamMoeg",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "caupona.mixins.json"
        ])
    }
}

//jar.finalizedBy('reobfJar')
//build.finalizedBy('genItemNames')
//jar.mustRunAfter('runData')
/*
task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}
task fullJar
fullJar.finalizedBy('runData')
fullJar.finalizedBy('jar')
task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set('deobf')
}
*/
String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = "<span style=\"font-size: 18px; color: #333399;\">Caupona v${mod_version}</span>&nbsp;&nbsp;<em>for Minecraft ${minecraft_version}</em><br/>"
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            str += temp+"<br />"
            lineCount++
        }
    }
    return str
}

/*
artifacts {
    archives sourcesJar
    archives deobfJar
}*/
// Automatically apply a license header when running checkLicense / updateLicense
license {
    header = project.file('HEADER.txt')
    ignoreFailures = true
    include '**/*.java'
}
publish.finalizedBy('publishToMavenLocal')
publishing {
    publications {
        maven(MavenPublication) {
            artifact jar
           // artifact deobfJar
           // artifact sourcesJar
        }
    }
    repositories {
        maven {
            url = 'https://www.khjxiaogu.com/maven'
            credentials {
                username = findProperty('khjmavenUser')
                password = findProperty('khjmavenPass')
            }
        }
    }
}/*
curseforge {
    project {
        def envApiKey = System.getenv('CURSEFORGE_API_KEY')
        apiKey = envApiKey == null ? 'nope' : envApiKey
        id = project.projectId
        changelog = getChangelogText()
        changelogType = 'html'
        releaseType = project.curse_type
        addGameVersion project.minecraft_version
		
        mainArtifact (jar) {
        	relations{
				optionalDependency "patchouli"
				optionalDependency "jei"
			}
        }
    }
}
modrinth {
    token = System.getenv("MODRINTH_TOKEN") // Remember to have the MODRINTH_TOKEN environment variable set or else this will fail - just make sure it stays private!
    projectId = project.modrinthId // This can be the project ID or the slug. Either will work!
    versionNumber = project.version // You don't need to set this manually. Will fail if Modrinth has this version already
    versionType = project.curse_type // This is the default -- can also be `beta` or `alpha`
    uploadFile = jar // With Loom, this MUST be set to `remapJar` instead of `jar`!
    gameVersions = [project.minecraft_version] // Must be an array, even with only one version
    loaders = ["forge"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
    dependencies { // A special DSL for creating dependencies
        optional.project "jei"
        optional.project "patchouli"
    }
}*/